#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2016 Joyent, Inc.
 */

var fs = require('fs');
var http = require('http');
var path = require('path-platform');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['header', 'H'],
            type: 'arrayOfString',
            help: 'HTTP headers to include',
            helpArg: 'HEADER'
        },
        {
            names: ['quiet', 'q'],
            type: 'bool',
            help: 'disable the progress bar'
        },
        {
            names: ['progress'],
            type: 'bool',
            help: 'force the progress bar to draw, even when stderr redirected'
        },
        {
            names: ['output', 'o'],
            type: 'string',
            help: 'write output to <file> instead of stdout'
        },
        {
            names: ['remote-name', 'O'],
            type: 'bool',
            help: 'write output to a file using remote object name as filename'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error('mget: ' + err.toString());
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'path...');

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');

    opts.paths = opts._args;

    if (opts.remote_name) {
        if (opts.paths.length !== 1) {
            manta.cli_usage(OPTIONS_PARSER, '--remote-name only works with ' +
              'a single object path', 'path...');
        } else {
            opts.output = path.posix.basename(opts.paths[0]);
        }
    }

    opts.headers = {};
    (opts.header || []).forEach(function (h) {
        if (h.indexOf(':') === -1) {
            manta.cli_usage(OPTIONS_PARSER,
                            'header must be in the form of "[header]: value"',
                            'path...');
        }
        var tmp = h.split(':');
        opts.headers[tmp[0]] = tmp[1].trim();
    });

    return (opts);
}


function printEntry(obj) {
    console.log('%j', obj);
}



///--- Mainline

(function main() {
    var opts = parseOptions();
    var client = manta.createBinClient(opts);
    var i = -1;
    var out = process.stdout;
    var drawProgressBar = true;

    function get() {
        var p = opts.paths[++i];
        if (!p) {
            client.close();
            return;
        }

        client.get(p, function (err, stream, res) {
            ifError(err);

            var bar;
            var src = stream;
            if (opts.progress || drawProgressBar) {
                var baropts = {
                    filename: p,
                    devtty: opts.progress
                };
                var clen =
                    parseInt(res.headers['content-length'],
                             10);
                if (clen >= 0) {
                    baropts.size = clen;
                } else {
                    baropts.nosize = true;
                }
                bar = new manta.ProgressBar(baropts);
                src = stream.pipe(bar.stream());
            }

            src.pipe(out);

            src.on('end', function () {
                get();
            });
        });
    }

    if (opts.quiet || !Boolean(process.stderr.isTTY))
        drawProgressBar = false;

    if (opts.output) {
        out = fs.createWriteStream(opts.output);
        out.on('open', get.bind(this));
    } else {
        if (out.isTTY) {
            /*
             * If we're outputting to a TTY, then we don't
             * want to draw the progress bar as it will likely
             * clobber the output.
             */
            drawProgressBar = false;
        }
        get();
    }
})();
